orbs:
  # The Windows orb gives us everything we need to start using the Windows executor.
  win: circleci/windows@5.0
  go: circleci/go@1.11

# The "sign binary" rubs in a MacOS environment, so it's necessary to download GW's binaries
env: &env
  environment:
    GRUNTWORK_INSTALLER_VERSION: v0.0.39
    MODULE_CI_VERSION: v0.57.0
    TOFU_ENGINE_VERSION: "v0.0.4"

defaults: &defaults
  docker:
    - image: 087285199408.dkr.ecr.us-east-1.amazonaws.com/circle-ci-test-image-base:go1.21.9-tf1.5-tg58.8-pck1.8-ci56.0

# Install Terraform which is not available in the default image
install_terraform_latest: &install_terraform_latest
  name: Install the latest Terraform
  command: |
    pushd .
    cd /tmp
    export TERRAFORM_VERSION=1.9.1
    curl -L "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
    unzip -o terraform.zip
    sudo install -m 0755 terraform /usr/local/bin/terraform
    rm -rf terraform
    rm -rf terraform.zip
    popd
    terraform --version

install_tofu: &install_tofu
  name: Install OpenTofu
  command: |
    pushd .
    cd /tmp
    curl -L "https://github.com/opentofu/opentofu/releases/download/v1.8.0/tofu_1.8.0_linux_amd64.zip" -o tofu.zip
    unzip -o tofu.zip
    sudo install -m 0755 tofu /usr/local/bin/tofu
    rm -rf tofu
    rm -rf tofu.zip
    popd
    tofu --version

install_tflint: &install_tflint
  name: Install TFlint
  command: |
    pushd .
    cd /tmp
    curl -L "https://github.com/terraform-linters/tflint/releases/download/v0.47.0/tflint_linux_amd64.zip" -o tflint.zip
    unzip -o tflint.zip
    sudo install -m 0755 tflint /usr/local/bin/tflint
    rm -rf tflint
    rm -rf tflint.zip
    popd
    tflint --version

install_tofu_engine: &install_tofu_engine
  name: Install OpenTofu Engine
  command: |
    # Download the OpenTofu Engine binary
    set -x
    export REPO="gruntwork-io/terragrunt-engine-opentofu"
    export ASSET_NAME="terragrunt-iac-engine-opentofu_rpc_${TOFU_ENGINE_VERSION}_linux_amd64.zip"
    wget -O "engine.zip" "https://github.com/${REPO}/releases/download/${TOFU_ENGINE_VERSION}/${ASSET_NAME}"
    unzip -o "engine.zip"

setup_test_environment: &setup_test_environment
  name: Setup integration tests environment
  command: |
    # Make GCP Service Account creds available as a file
    echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    echo 'export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json' >> $BASH_ENV
    # Import test / dev key for SOPS
    gpg --import --no-tty --batch --yes ./test/fixture-sops/test_pgp_key.asc
    mkdir -p logs
  no_output_timeout: 30m

run_integration_test: &run_integration_test
  name: Run integration tests
  command: |
    run-go-tests --packages "$(go list ./... | grep /test | tr '\n' ' ')" | tee logs/integration.log
  no_output_timeout: 30m

run_tflint_test: &run_tflint_test
  name: Run TFlint tests
  command: |
    run-go-tests --packages "-tags tflint -run TestTflint ./test" | tee logs/integration.log
  no_output_timeout: 30m

run_terratest_log_parser: &run_terratest_log_parser
  name: Terratest log parser
  command: |
    gruntwork-install --binary-name 'terratest_log_parser' --repo 'https://github.com/gruntwork-io/terratest' --tag 'v0.30.0'
    terratest_log_parser --testlog logs/integration.log --outputdir logs
  when: always

run_markdownlint: &run_markdownlint
  name: Run markdownlint
  command: |
    markdownlint \
    --disable 'MD013' \
    -- \
    docs

version: 2.1
jobs:
  test_windows:
    executor:
      name: win/default
      size: "large"
    steps:
      - checkout
      - run:
          name: Install golang
          shell: powershell.exe
          command: ./_ci/install-golang.ps1
      - run:
          name: Install Terraform
          shell: powershell.exe
          command: ./_ci/install-terraform.ps1
      - run:
          name: Install Opentofu
          shell: powershell.exe
          command: ./_ci/install-opentofu.ps1
      - run:
          name: Install TFLint
          shell: powershell.exe
          command: ./_ci/install-tflint.ps1
      - run:
          name: Run go terraform tests
          shell: powershell.exe
          no_output_timeout: 45m
          command: |
            # We're running this test only on Windows currently to provide a convenient
            # means of reproducing Terragrunt issues that only occur on that platform
            go test -v ./... -run TestWindowsTerragruntSourceMapDebug -timeout 45m
            go test -v ./... -run TestWindowsTflintIsInvoked -timeout 45m
            go test -v ./... -run TestCanonicalPath -timeout 45m
            go test -v ./... -run TestJoinTerraformModulePath -timeout 45m
            go test -v ./... -run TestIncludeInCopy -timeout 45m
            go test -v ./... -run TestWindowsScaffold -timeout 45m
            go test -v ./... -run TestWindowsScaffoldRef -timeout 45m
            go test -tags windows -v -un -run TestWindows ./test -timeout 45m
      - run:
          name: Run go tofu tests
          shell: powershell.exe
          no_output_timeout: 45m
          environment:
            TERRAGRUNT_TFPATH: tofu
          command: |
            # We're running this test only on Windows currently to provide a convenient
            # means of reproducing Terragrunt issues that only occur on that platform
            go test -v ./... -run TestWindowsTerragruntSourceMapDebug -timeout 45m
            go test -v ./... -run TestWindowsTflintIsInvoked -timeout 45m
            go test -v ./... -run TestCanonicalPath -timeout 45m
            go test -v ./... -run TestJoinTerraformModulePath -timeout 45m
            go test -v ./... -run TestIncludeInCopy -timeout 45m
            go test -v ./... -run TestWindowsScaffold -timeout 45m
            go test -v ./... -run TestWindowsScaffoldRef -timeout 45m
            go test -tags windows -v -un -run TestWindows ./test -timeout 45m
  # We're running unit tests separately from integration tests - with no parallelization.
  # With heavy parallelization coupled with re-use of test fixtures we've witnessed slight
  # instability with the tests. The unit tests are fast to execute, so there is negligible
  # performance penalty.
  unit_test:
    <<: *defaults
    steps:
      - checkout
      # Run pre-commit hooks and fail the build if any hook finds required changes.
      - run:
          name: run precommit
          command: |
            # Oct 26, 2019: Install the last known working version of pre-commit. Also, we have to pin the version of
            # transitive dependencies that are being pulled in which released new versions that are no longer compatible
            # with any python < 3.6.
            pip3 install pre-commit==1.21.0 cfgv==2.0.1 zipp==1.1.0
            go install golang.org/x/tools/cmd/goimports@latest
            export GOPATH=~/go/bin && export PATH=$PATH:$GOPATH
            pre-commit install
            pre-commit run --all-files
      - run:
          name: generate mocks
          command: |
            make install-mockery
            make generate-mocks
      - run:
          name: run lint
          command: |
            make install-lint
            make run-lint
      - run:
          command: |
            mkdir -p logs
            go mod tidy
            run-go-tests --parallelism 1 --packages "$(go list ./... | grep -v /test | tr '\n' ' ')"  | tee logs/unit.log
            go test -run=TestParseDependencyBlockMultiple -race ./config | tee -a logs/unit.log
      - run:
          command: terratest_log_parser --testlog logs/unit.log --outputdir logs
          when: always
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs

  integration_test_terraform_1_5:
    resource_class: xlarge
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *install_tflint
      - run:
          <<: *setup_test_environment
      - run:
          <<: *run_integration_test
      - run:
          <<: *run_terratest_log_parser
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs

  integration_test_terraform_with_provider_cache:
    resource_class: xlarge
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *install_tflint
      - run:
          <<: *setup_test_environment
      - run:
          <<: *run_integration_test
          environment:
            TERRAGRUNT_PROVIDER_CACHE: "1"
      - run:
          <<: *run_terratest_log_parser
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs

  integration_test_terraform_latest:
    resource_class: xlarge
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *install_terraform_latest
      - run:
          <<: *install_tflint
      - run:
          <<: *setup_test_environment
      - run:
          <<: *run_integration_test
      - run:
          <<: *run_terratest_log_parser
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs

  integration_test_tofu:
    resource_class: xlarge
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *install_tofu
      - run:
          <<: *install_tflint
      - run:
          <<: *setup_test_environment
      - run:
          # Remove terraform
          sudo rm -f $(which terraform)
      - run:
          <<: *run_integration_test
          environment:
            TERRAGRUNT_TFPATH: tofu
      - run:
          <<: *run_terratest_log_parser
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs

  integration_test_tofu_with_provider_cache:
    resource_class: xlarge
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *install_tofu
      - run:
          <<: *install_tflint
      - run:
          <<: *setup_test_environment
      - run:
          # Remove terraform
          sudo rm -f $(which terraform)
      - run:
          <<: *run_integration_test
          environment:
            TERRAGRUNT_TFPATH: tofu
            TERRAGRUNT_PROVIDER_CACHE: "1"
      - run:
          <<: *run_terratest_log_parser
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs

  integration_test_tofu_engine:
    resource_class: xlarge
    <<: *defaults
    <<: *env
    steps:
      - checkout
      - run:
          <<: *install_tofu
      - run:
          <<: *install_tofu_engine
      - run:
          <<: *setup_test_environment
      - run:
          # Remove terraform
          sudo rm -f $(which terraform)
      - run:
          name: Run engine integration tests
          command: |
            run-go-tests --packages "-tags=engine -run ^TestEngine ./test" | tee logs/integration.log
          no_output_timeout: 30m
          environment:
            TERRAGRUNT_TFPATH: tofu
      - run:
          <<: *run_terratest_log_parser
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs

  # Run TFLint tests separately as tflint during execution change working directory.
  integration_test_tflint:
    resource_class: large
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *install_tofu
      - run:
          <<: *install_tflint
      - run:
          <<: *setup_test_environment
      - run:
          <<: *run_tflint_test
      - run:
          <<: *run_terratest_log_parser
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs

  run_markdownlint:
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *run_markdownlint

  build:
    resource_class: xlarge
    <<: *defaults
    steps:
      - checkout
      - run: build-go-binaries --app-name terragrunt --dest-path bin --ld-flags "-X github.com/gruntwork-io/go-commons/version.Version=$CIRCLE_TAG -extldflags '-static'"
      - persist_to_workspace:
          root: .
          paths: [bin]

  test_signing:
    <<: *env
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go/install:
          version: "1.20.5"
      - run:
          name: Install sign-binary-helpers
          command: |
            curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
            gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
            gruntwork-install --module-name "sign-binary-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
      - run:
          name: Compile and sign the binaries
          command: |
            export AC_PASSWORD=${MACOS_AC_PASSWORD}
            export AC_PROVIDER=${MACOS_AC_PROVIDER}

            sign-binary --os mac --install-macos-sign-dependencies .gon_amd64.hcl
            sign-binary --os mac .gon_arm64.hcl
            echo "Done signing the binary"

            # Replace the files in bin. These are the same file names generated from .gon_amd64.hcl and .gon_arm64.hcl
            unzip terragrunt_darwin_amd64.zip
            mv terragrunt_darwin_amd64 bin/

            unzip terragrunt_darwin_arm64.zip
            mv terragrunt_darwin_arm64 bin/

            codesign -dv --verbose=4 ./bin/terragrunt_darwin_amd64
            codesign -dv --verbose=4 ./bin/terragrunt_darwin_arm64

  deploy:
    <<: *env
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go/install:
          version: "1.20.5"
      - run:
          name: Install sign-binary-helpers
          command: |
            curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
            gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
            gruntwork-install --module-name "sign-binary-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
      - run:
          name: Compile and sign the binaries
          command: |
            export AC_PASSWORD=${MACOS_AC_PASSWORD}
            export AC_PROVIDER=${MACOS_AC_PROVIDER}

            sign-binary --os mac --install-macos-sign-dependencies .gon_amd64.hcl
            sign-binary --os mac .gon_arm64.hcl
            echo "Done signing the binary"

            # Replace the files in bin. These are the same file names generated from .gon_amd64.hcl and .gon_arm64.hcl
            unzip terragrunt_darwin_amd64.zip
            mv terragrunt_darwin_amd64 bin/

            unzip terragrunt_darwin_arm64.zip
            mv terragrunt_darwin_arm64 bin/
      - run:
          name: Run SHA256SUM
          command: |
            brew install coreutils
            cd bin && sha256sum * > SHA256SUMS
      - run: upload-github-release-assets bin/*
      - run:
          name: Verify that assets attached to the release
          command: |
            ./_ci/verify-release-assets.sh

workflows:
  version: 2
  build-and-test:
    jobs:
      - test_windows:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - unit_test:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - integration_test_terraform_1_5:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - integration_test_terraform_latest:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - integration_test_terraform_with_provider_cache:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - integration_test_tofu:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - integration_test_tofu_with_provider_cache:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - integration_test_tflint:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - integration_test_tofu_engine:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
            - APPLE__OSX__code-signing
      - run_markdownlint:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - build:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
      - test_signing:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
            - APPLE__OSX__code-signing
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
            - APPLE__OSX__code-signing
