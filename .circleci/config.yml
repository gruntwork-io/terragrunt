orbs:
  # The Windows orb gives us everything we need to start using the Windows executor.
  win: circleci/windows@2.4.0

defaults: &defaults
  docker:
    - image: 087285199408.dkr.ecr.us-east-1.amazonaws.com/circle-ci-test-image-base:go1.16-tf1.0-tg0.30

version: 2.1
jobs:
  test_windows:
    executor:
      name: win/default
      size: "large"
    steps:
      - checkout
      - run:
          name: Install golang
          shell: powershell.exe
          command: |
            # Remove the old go installation
            Remove-Item "C:\Go" -Recurse
            # Download golang, unpack it, and then update the PATH to include gobin
            $golangURI = "https://golang.org/dl/go1.14.7.windows-amd64.zip"
            $output = "go1.14.7.zip"
            # The SilentlyContinue is needed to handle access denied error. See
            # https://discuss.circleci.com/t/access-denied-error-while-trying-to-download-software-on-windows-cirlcleci-environment/32809/2
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -Uri $golangURI -OutFile $output
            Expand-Archive -LiteralPath $output -DestinationPath "C:\Gotmp"
            Move-Item "C:\Gotmp\go" "C:\Go"
            # Verify installation
            go version
      - run:
          name: Install Terraform
          shell: powershell.exe
          command: |
            $TerraformInstallPath = "C:\Program Files\Terraform\terraform.exe"
            $TerraformTmpPath = "C:\Terraformtmp"
            $TerraformTmpBinaryPath = "C:\Terraformtmp\terraform.exe"
            $TerraformPath = "C:\Program Files\Terraform"
            # Remove any old terraform installation, if present
            if (Test-Path $TerraformInstallPath)
            {
              Remove-Item $TerraformInstallPath -Recurse
            }
            # Download terraform and unpack it
            $terraformURI = "https://releases.hashicorp.com/terraform/1.0.4/terraform_1.0.4_windows_amd64.zip"
            $output = "terraform.1.0.4.zip"
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -Uri $terraformURI -OutFile $output
            New-Item -ItemType "directory" -Path $TerraformTmpPath
            # Unpack Terraform to temp directory
            Expand-Archive -LiteralPath $output -DestinationPath $TerraformTmpPath
            # Make new Terraform directory to hold binary
            New-Item -ItemType "directory" -Path $TerraformPath
            Move-Item $TerraformTmpBinaryPath $TerraformInstallPath
            # Add new Terraform path to system
            $OldPath = [System.Environment]::GetEnvironmentVariable('PATH', "Machine")
            $NewPath = "$OldPath;$TerraformPath"
            [Environment]::SetEnvironmentVariable("PATH", "$NewPath", "Machine")
            # Load System and User PATHs into latest $env:Path, which has the effect of "refreshing" the latest path 
            # in the current PowerShell session
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User") 
            # Verify installation
            terraform version
      - run:
          name: Run go tests
          shell: powershell.exe
          no_output_timeout: 45m
          command: |
            go test -v ./... -timeout 45m
  # We're running unit tests separately from integration tests - with no parallelization.
  # With heavy parallelization coupled with re-use of test fixtures we've witnessed slight
  # instability with the tests. The unit tests are fast to execute, so there is negligible
  # performance penalty.
  unit_test:
    <<: *defaults
    steps:
      - checkout
      # Run pre-commit hooks and fail the build if any hook finds required changes.
      - run:
          name: run precommit
          command: |
            # Oct 26, 2019: Install the last known working version of pre-commit. Also, we have to pin the version of
            # transitive dependencies that are being pulled in which released new versions that are no longer compatible
            # with any python < 3.6.
            pip3 install pre-commit==1.21.0 cfgv==2.0.1 zipp==1.1.0
            go get golang.org/x/tools/cmd/goimports
            export GOPATH=~/go/bin && export PATH=$PATH:$GOPATH
            pre-commit install
            pre-commit run --all-files
      - run:
          command: |
            mkdir -p logs
            run-go-tests --parallelism 1 --packages "$(go list ./... | grep -v /test | tr '\n' ' ')"  | tee logs/unit.log
      - run:
          command: terratest_log_parser --testlog logs/unit.log --outputdir logs
          when: always
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs
  integration_test:
    <<: *defaults
    steps:
      - checkout
      - run: gruntwork-install --binary-name 'terratest_log_parser' --repo 'https://github.com/gruntwork-io/terratest' --tag 'v0.30.0'
      # Make GCP Service Account creds available as a file
      - run: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run: echo 'export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json' >> $BASH_ENV
      # Import test / dev key for SOPS
      - run:
          command: |
            gpg --import --no-tty --batch --yes ./test/fixture-sops/test_pgp_key.asc
            mkdir -p logs
            run-go-tests --packages "$(go list ./... | grep /test | tr '\n' ' ')" | tee logs/integration.log
      - run:
          command: terratest_log_parser --testlog logs/integration.log --outputdir logs
          when: always
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs
  build:
    <<: *defaults
    steps:
      - checkout
      - run: build-go-binaries --app-name terragrunt --dest-path bin --ld-flags "-X main.VERSION=$CIRCLE_TAG"
  deploy:
    <<: *defaults
    steps:
      - checkout
      - run: build-go-binaries --app-name terragrunt --dest-path bin --ld-flags "-X main.VERSION=$CIRCLE_TAG"
      - run: cd bin && sha256sum * > SHA256SUMS
      - run: upload-github-release-assets bin/*
workflows:
  version: 2
  build-and-test:
    jobs:
      - test_windows:
          filters:
            tags:
              only: /^v.*/
          context:
            - Gruntwork Admin
            - Gruntwork GCP
      - unit_test:
          filters:
            tags:
              only: /^v.*/
          context:
            - Gruntwork Admin
            - Gruntwork GCP
      - integration_test:
          filters:
            tags:
              only: /^v.*/
          context:
            - Gruntwork Admin
            - Gruntwork GCP
      - build:
          requires:
            - unit_test
            - integration_test
          filters:
            tags:
              only: /^v.*/
          context:
            - Gruntwork Admin
            - Gruntwork GCP
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context:
            - Gruntwork Admin
            - Gruntwork GCP
