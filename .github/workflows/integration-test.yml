name: Integration Tests

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test (${{ matrix.integration.name }})
    runs-on: ${{ matrix.integration.os }}-latest
    env:
      MISE_PROFILE: cicd
    strategy:
      fail-fast: false
      matrix:
        integration:
          - name: OpenTofu 1.9
            os: ubuntu
            target: ./test
            setup_scripts:
              - .github/scripts/setup/tofu-switch.sh
          - name: OpenTofu Experiment
            os: ubuntu
            target: ./test
            setup_scripts:
              - .github/scripts/setup/install-custom-iac.sh
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: "Save space on node"
        if: runner.os != 'Windows'
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a
          df -h

      # install dependencies for the integration tests
      - name: Use mise to install dependencies
        uses: jdx/mise-action@v2
        with:
          version: 2025.4.4
          experimental: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Secrets Environment
        run: ./.github/scripts/setup/generate-secrets.sh
        env:
          NAME: ${{ matrix.integration.name }}
          ENV_FILE: ${{ github.workspace }}/.env.secrets
          SECRETS: ${{ join(matrix.integration.secrets, ' ') }}
          GHA_DEPLOY_KEY: ${{ secrets.GHA_DEPLOY_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_COMPUTE_ZONE: ${{ secrets.GOOGLE_COMPUTE_ZONE }}
          GOOGLE_IDENTITY_EMAIL: ${{ secrets.GOOGLE_IDENTITY_EMAIL }}
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
          GCLOUD_SERVICE_KEY_IMPERSONATOR: ${{ secrets.GCLOUD_SERVICE_KEY_IMPERSONATOR }}
          AWS_TEST_S3_ASSUME_ROLE: ${{ secrets.AWS_TEST_S3_ASSUME_ROLE }}
        shell: bash

      - name: Setup
        if: runner.os != 'Windows'
        run: ./.github/scripts/setup/run-setup-scripts.sh
        shell: bash
        env:
          ENV_FILE: ${{ github.workspace }}/.env.secrets
          SETUP_SCRIPTS: ${{ join(matrix.integration.setup_scripts, ' ') }}

      - name: Windows Setup
        if: runner.os == 'Windows'
        run: pwsh -File ./.github/scripts/setup/windows-setup.ps1
        shell: pwsh
        env:
          ENV_FILE: ${{ github.workspace }}/.env.secrets
          SETUP_SCRIPTS: ${{ join(matrix.integration.setup_scripts, ' ') }}

      - id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-integration-test-${{ matrix.integration.name }}-${{ hashFiles('**/go.sum') }}

      - name: Install psrecord
        run: pip install psrecord matplotlib

      - name: Run Tests with psrecord (100 times)
        run: |
          if [ "$SKIP" != "true" ]; then
            source "${GITHUB_WORKSPACE}/.env.secrets"
            mkdir -p psrecord-results

            for i in $(seq 1 100); do
              echo "üîÅ Run #$i"
              psrecord --interval 1 \
                --log "psrecord-results/log_${i}.txt" \
                --plot "psrecord-results/plot_${i}.png" ./script.sh
            done
          else
            echo "Skipping tests for $NAME as the skip flag is true."
          fi
        shell: bash
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET: ${{ matrix.integration.target }}
          TAGS: ${{ matrix.integration.tags }}
          RUN: ${{ matrix.integration.run }}
          SKIP: ${{ matrix.integration.skip }}
          NAME: ${{ matrix.integration.name }}
          TEST_ARGS: ${{ matrix.integration.test_args }}
      - name: Upload psrecord Artifacts
        if: always()  # Upload even if some tests fail
        uses: actions/upload-artifact@v4
        with:
          name: psrecord-${{ matrix.integration.name }}
          path: psrecord-results/